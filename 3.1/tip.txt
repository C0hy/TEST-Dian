在3-1中要求实现一种鉴权协议，简单来说就是交互中的安全识别确认。
在我的设计中主要包括了以下几步鉴权：
1、在OPTIONS方法中，添加了需要用户输入username和password。服务端持有已有客户的username和password，
并且以特定格式（//username:xxx/password:xxx/）存在userinfo.txt文件中（在此也可以使用数据库相关方法）,
服务端启动之后便会读取文件，解析记录已有客户的信息。服务端在接收到客户端的OPTIONS请求之后，会在记录中比对username和password，
比对成功之后会接受客户建立对话的请求，否则会返回错误信息（没有用户或密码错误），并断开连接。
2、SETUP方法建立连接，会由服务端生成session_id并发给客户端，双方保存，以备后续鉴权使用。
3、PLAY方法请求播放（即服务端发送文件），客户端的请求报文中会附有SETUP中由服务端随机生成的session_id，
服务端会解析到报文中的session_id，来和自己保存的比较，如果相同则发送视频文件，否则返回错误信息，
拒绝发送视频，文件并断开连接。
（因为session_id是由程序自行记录发送的，在我们的环境下一般是不会出错，但当然可以人为在其中某一步使session_id发生改变，
经测试，服务端应对PLAY方法下的session_id不正确的处理方法可行）
4、TEARDOWN方法是要求断开连接，客户端也会发送一个session_id给服务端，为了实现鉴权，在此相较于原来又新增了一步对话：
即服务端在收到TEARDOWN方法后会鉴定session_id正确与否，正确直接断开连接，错误则会返回一个错误信息；
客户端会新增一个recv，等待服务端的处理，客户端直接断开连接或者打印错误信息。
但在这里其实无论结果如何，都会断开连接，这里鉴权的意义不是很大，但在现实操作中可能会有特别的意义，
比如最后退出时如果鉴权不和，在下次通话时会将此用户拉入黑名单等。

这里只是一个很简单的鉴权，针对报文中交互的特定信息进行识别匹配确认，鉴权的方式还有很多，比如每次报文的格式是有要求的，
这个格式也可以当做鉴权的标准，如果不符合协议，即停止通信等。